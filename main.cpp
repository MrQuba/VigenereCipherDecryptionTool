#include <iostream>
#include <vector>
#include <algorithm>

// alphabet population generated by ChatGPT 3.5 & letter index searching
std::string alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
int findIndexOfLetter(char& in) {
	int index;

	in = toupper(in);

	auto it = std::find(alphabet.begin(), alphabet.end(), in);

	if (it != alphabet.end())
		index = std::distance(alphabet.begin(), it);
	else return -1;
	return index;
}
std::string takeInput(std::string inputText) {
	std::string in;
	std::cout << inputText << std::endl;
	std::cin >> in;
	return in;
}
void changeCharacterSizeToUpper(std::string& input) {
	for (int i = 0; i < input.length(); i++)
		input[i] = toupper(input[i]);
}
int main() {
	// Variable Declarations===========================
	std::string inputText;
	std::string key;
	std::string result;
	int keyIndex = 0;
	int textIndex = 0;
	// User Input=====================================
	inputText = takeInput("Input Text To Decipher:");
	key = takeInput("Input Key:");
	// Match Letter Size==============================
	changeCharacterSizeToUpper(inputText);
	changeCharacterSizeToUpper(key);
	// Decryption======================================
	keyIndex = -1;
	textIndex = 0;
		for (int x = 0; x < inputText.length(); x++) {
		textIndex = findIndexOfLetter(inputText[x]);
		if (textIndex != -1) {
			keyIndex = (keyIndex + 1) % key.length();
			std::cout << "Processing character: " << inputText[x] << " (Text Index: " << textIndex << ", Key Index: " << keyIndex << ", Key: " << key[keyIndex] << ")" << std::endl;

			result.push_back(alphabet[((findIndexOfLetter(inputText[x]) - findIndexOfLetter(key[keyIndex]) + 26) % 26)]);

		}
		else result.push_back(inputText[x]);
	}
	std::cout << "Result of decryption of text: " << inputText << " with key: " << key << " is: " << result << std::endl;


	return 0;
}